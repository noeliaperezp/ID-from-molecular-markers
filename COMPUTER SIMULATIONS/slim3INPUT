// Keywords: 

// set up a simple neutral simulation
initialize()
{
	// define here the name of the files
	defineConstant("file_output1","./collect_par_mutations.txt"); // output file

	// set the overall mutation rate
	initializeMutationRate(4e-8);
	
	// m1 / m2 mutation type: neutral / deleterious
	initializeMutationType("m1", 0.0, "f", 0.0);
	initializeMutationType("m2", 0.0, "g", -0.2, 0.33);
	
	// g1 genomic element type: uses m1 for all mutations
	initializeGenomicElementType("g1", c(m1,m2), c(1.0,0.0));
	
	// uniform chromosome of length 100 Mb
	initializeGenomicElement(g1, 0, 99999999);
	
	// recombination along the chromosomes
	rates = c(1e-8, 0.5, 1e-8);
	ends = c(49999999, 50000000, 99999999);
 	initializeRecombinationRate(rates, ends);

	writeFile(filePath=file_output1,contents=(""),append=F);
}

// create a population of 1000 individuals
1
{
	sim.addSubpop("p1", 1000);
}

mutation(m2) {
    K = 7.6;	
    mut.setValue("hh", runif(1,0,exp(K*mut.selectionCoeff)));
	writeFile(filePath=file_output1,contents=(mut.getValue("hh") +
	      "\t" + mut.selectionCoeff + "\t" + mut.position),append=T);
    //debugging 	
    return T;
}
fitness(m2) {	
    hh = homozygous? 1 else mut.getValue("hh");	
    return 1.0 + hh * mut.selectionCoeff; // 1 + hs
}

// run to generation 10000
10000
{
	sim.outputFull();
	//sim.simulationFinished();
 }
